////author: Grecia Castelazo
#include <iostream>
#include "TFile.h"
#include <string>
#include "TTree.h"
#include "TH1F.h"
#include "TPad.h"

void readtree()
{
  const std::string filename="/Users/greciacastelazo/Documents/outFile_MERGED_RecoProcess_DoRecoJetsFalse_20180604.root";
  std::cout << filename << std::endl;
  TFile *f = new TFile(filename.c_str(),"read");
  TTree *t1 = (TTree*)f->Get("recoAndGenTreeR0p4EScheme");
  t1->Print();
  Int_t nJt_;
  const Int_t nmaxJt=500;
  Float_t genJtPt_[nmaxJt];
  Float_t genJtPhi_[nmaxJt];
  Float_t genJtEta_[nmaxJt];
  t1->SetBranchAddress("nJt",&nJt_);
    std::cout << filename << std::endl;
  TFile *f = new TFile(filename.c_str(),"read");
  TTree *t1 = (TTree*)f->Get("recoAndGenTreeR0p4EScheme");
  t1->Print();
  Int_t nJt_;
  const Int_t nmaxJt=500;
  Float_t genJtPt_[nmaxJt];
  Float_t genJtPhi_[nmaxJt];
  Float_t genJtEta_[nmaxJt];
  t1->SetBranchAddress("nJt",&nJt_);
  t1->SetBranchAddress("genJtPt",genJtPt_);
  t1->SetBranchAddress("genJtPhi",genJtPhi_);
  t1->SetBranchAddress("genJtEta",genJtEta_);

  //create four  histograms
  TH1F* hist_p = new TH1F("hnJt", "nJt distribution",100,4,-4);
  TH1F* hist_p2 = new TH1F("hgenJtPt", "JtPt distribution",100,4,-4);
  TH1F* hist_p3 = new TH1F("hgenJtPhi", "JtPhi distribution",100,4,-4);
  TH1F* hist_p4 = new TH1F("hgenJtEta", "JtEta distribution",100,4,-4);
  //read all entries and fill the histograms
  Int_t nentries = (Int_t)t1->GetEntries();
   t1->SetBranchAddress("genJtPhi",genJtPhi_);
  t1->SetBranchAddress("genJtEta",genJtEta_);

  //create four  histograms
  TH1F* hist_p = new TH1F("hnJt", "nJt distribution",100,4,-4);
  TH1F* hist_p2 = new TH1F("hgenJtPt", "JtPt distribution",100,4,-4);
  TH1F* hist_p3 = new TH1F("hgenJtPhi", "JtPhi distribution",100,4,-4);
  TH1F* hist_p4 = new TH1F("hgenJtEta", "JtEta distribution",100,4,-4);
  //read all entries and fill the histograms
  Int_t nentries = (Int_t)t1->GetEntries();
  for (Int_t i=0; i<nentries; i++) {
    t1->GetEntry(i);
    hist_p->Fill(nJt_);

    for(Int_t jI = 0; jI < nJt_; jI++){
      hist_p2->Fill(genJtPt_[jI]);
    }
    for(Int_t kI = 0; kI < nJt_; kI++){
      hist_p3->Fill(genJtPhi_[kI]);
    }
    for(Int_t lI=0; lI < nJt_; lI++){
        t1->GetEntry(i);
    hist_p->Fill(nJt_);

    for(Int_t jI = 0; jI < nJt_; jI++){
      hist_p2->Fill(genJtPt_[jI]);
    }
    for(Int_t kI = 0; kI < nJt_; kI++){
      hist_p3->Fill(genJtPhi_[kI]);
    }
    for(Int_t lI=0; lI < nJt_; lI++){
      hist_p4->Fill(genJtEta_[lI]);
    }
  }

  TFile *w = new TFile("outfile.root","recreate");
  hist_p->Write();
  hist_p2->Write();
  hist_p3->Write();
  hist_p4->Write();
  w->Close();
  delete w;
    delete hist_p;
  delete hist_p2;
  delete hist_p3;
  delete hist_p4;
  f->Close();
  delete f;
  return;
}
